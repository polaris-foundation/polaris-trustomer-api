[tox]
skipsdist = True
envlist = lint,py39
source_package=dhos_trustomer_api
all_sources = {[tox]source_package} tests/ integration-tests/
requires = tox-venv
           tox-pip-version
provision_tox_env=provision

[flake8]
max-line-length = 100

[testenv:provision]
envdir={toxworkdir}/.provision

[testenv:poetry-install]
commands = poetry install

[testenv:default]
description = Installs all dependencies, verifies that lint tools would not change the code,
              runs security check programs then runs unit tests with coverage. Running `tox -e py39`
              does the same.
setenv= {[testenv]setenv}

[testenv]
envdir = {toxworkdir}/py39
pip_version = pip>=21.1.1

setenv = ENVIRONMENT = DEVELOPMENT
         LOG_LEVEL = DEBUG
         LOG_FORMAT = COLOUR
         FLASK_APP={[tox]source_package}/autoapp.py
         TRUSTOMER_CONFIG_MOUNT=./trustomer-config-dummy
         NO_PROXY=*
passenv =
        CIRCLECI
        DATABASE_HOST
        DATABASE_PORT


allowlist_externals =
        bandit
        bash
        black
        coverage
        echo
        isort
        mypy
        poetry
        python
        safety
        sh
        true
        npx

commands =
    poetry install
    black --check {[tox]source_package} tests/
    isort {[tox]source_package}/ tests/ --check-only
    mypy {[tox]source_package} tests/
    bandit -r {[tox]source_package} -lll
    safety check
    coverage run --source {[tox]source_package} -m py.test {posargs}
    coverage report
    coverage xml -i -o coverage-reports/coverage.xml

list_dependencies_command = true

[testenv:lint]
description = Run `black`, `isort`, and `mypy` to clean up source files.
commands =
       poetry install
       black {[tox]all_sources}
       isort --profile black {[tox]all_sources}
       mypy {[tox]source_package} tests/

[testenv:debug]
description = Runs last failed unit tests only with debugger invoked on failure.
              Additional py.test command line arguments may given preceded by `--`,
              e.g. `tox -e debug -- -k sometestname -vv`
commands =
    pytest {posargs:--lf --pdb}

setenv = {[testenv:default]setenv}

[testenv:update]
description = Updates the `poetry.lock` file from `pyproject.toml`
commands = poetry update

[testenv:openapi]
description = Recreate API specification (openapi.yaml) from Flask blueprint
commands =
    poetry install
    python -m flask create-openapi {toxinidir}/{[tox]source_package}/openapi/openapi.yaml
    npx markdown-swagger {toxinidir}/{[tox]source_package}/openapi/openapi.yaml {toxinidir}/README.md


[testenv:readme]
description = Updates the README file with database diagram and commands. (Requires graphviz `dot` is installed)

commands =
    python docs/make-targets.py README.md
